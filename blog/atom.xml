<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://squirrels-analytics.github.io/blog</id>
    <title>Squirrels Blog</title>
    <updated>2024-12-09T00:00:00.000Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://squirrels-analytics.github.io/blog"/>
    <subtitle>Squirrels Blog</subtitle>
    <icon>https://squirrels-analytics.github.io/img/squirrels.ico</icon>
    <entry>
        <title type="html"><![CDATA[Query 1B Rows in PostgreSQL >25x Faster with Squirrels!]]></title>
        <id>https://squirrels-analytics.github.io/blog/1brc-postgres</id>
        <link href="https://squirrels-analytics.github.io/blog/1brc-postgres"/>
        <updated>2024-12-09T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[The One Billion Row Challenge has been making waves in the data engineering community lately. Originally created to test CSV parsing performance, the challenge involves processing a file containing 1 billion weather measurements to calculate basic temperature statistics for each city. In this post, I'll tackle a variation of this challenge using PostgreSQL and demonstrate how to achieve dramatic performance improvements using Squirrels.]]></summary>
        <content type="html"><![CDATA[<p>The <a href="https://www.morling.dev/blog/one-billion-row-challenge/" target="_blank" rel="noopener noreferrer">One Billion Row Challenge</a> has been making waves in the data engineering community lately. Originally created to test CSV parsing performance, the challenge involves processing a file containing 1 billion weather measurements to calculate basic temperature statistics for each city. In this post, I'll tackle a variation of this challenge using PostgreSQL and demonstrate how to achieve dramatic performance improvements using Squirrels.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="the-challenge">The Challenge<a href="https://squirrels-analytics.github.io/blog/1brc-postgres#the-challenge" class="hash-link" aria-label="Direct link to The Challenge" title="Direct link to The Challenge">​</a></h2>
<p>The original <a href="https://www.morling.dev/blog/one-billion-row-challenge/" target="_blank" rel="noopener noreferrer">One Billion Row Challenge</a> focuses on raw CSV processing performance. For our variation, we'll:</p>
<ol>
<li>Load 1 billion rows into PostgreSQL with additional columns</li>
<li>Query for city-level temperature statistics</li>
<li>Create a Squirrels project to serve these analytics via REST API</li>
<li>Demonstrate significant query performance improvements</li>
<li>Show how to handle incremental data updates</li>
</ol>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="setting-up-the-environment">Setting Up the Environment<a href="https://squirrels-analytics.github.io/blog/1brc-postgres#setting-up-the-environment" class="hash-link" aria-label="Direct link to Setting Up the Environment" title="Direct link to Setting Up the Environment">​</a></h2>
<p>I provisioned the following AWS resources in the same region/AZ:</p>
<ul>
<li>An RDS PostgreSQL database (db.r6g.large: 2 vCPUs, 16GB RAM)</li>
<li>An EC2 instance (r8g.large: 2 vCPUs, 16GB RAM)</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="data-generation-and-loading">Data Generation and Loading<a href="https://squirrels-analytics.github.io/blog/1brc-postgres#data-generation-and-loading" class="hash-link" aria-label="Direct link to Data Generation and Loading" title="Direct link to Data Generation and Loading">​</a></h2>
<p>I generated a 24GB CSV file containing 1 billion weather measurements using a modified version of the createMeasurements.py script from <a href="https://github.com/ifnesi/1brc" target="_blank" rel="noopener noreferrer">this github repo</a>. The first few lines of the file look like this:</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">Bissau;2012-02-20;14.3</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Almaty;2019-10-24;-5.3</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Ankara;2012-10-27;-6.7</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Houston;2010-06-08;10.6</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Makassar;2012-04-29;36.0</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>The data was loaded into a simple PostgreSQL table with the following DDL:</p>
<div class="language-sql codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-sql codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">CREATE</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">TABLE</span><span class="token plain"> weather_data </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    id </span><span class="token keyword" style="color:#00009f">SERIAL</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">PRIMARY</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">KEY</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    city </span><span class="token keyword" style="color:#00009f">VARCHAR</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">100</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    recorded_date </span><span class="token keyword" style="color:#00009f">DATE</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    temperature </span><span class="token keyword" style="color:#00009f">FLOAT</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>This created a 73GB PostgreSQL table with 4 columns and 1 billion rows.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="initial-query-performance">Initial Query Performance<a href="https://squirrels-analytics.github.io/blog/1brc-postgres#initial-query-performance" class="hash-link" aria-label="Direct link to Initial Query Performance" title="Direct link to Initial Query Performance">​</a></h2>
<p>Our baseline query to calculate city-level statistics:</p>
<div class="language-sql codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-sql codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">SELECT</span><span class="token plain"> city</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">MIN</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">temperature</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">MAX</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">temperature</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">AVG</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">temperature</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">FROM</span><span class="token plain"> weather_data </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">GROUP</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">BY</span><span class="token plain"> city</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">ORDER</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">BY</span><span class="token plain"> city</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>This query took approximately 7 minutes to complete against the PostgreSQL table.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="enter-squirrels">Enter Squirrels<a href="https://squirrels-analytics.github.io/blog/1brc-postgres#enter-squirrels" class="hash-link" aria-label="Direct link to Enter Squirrels" title="Direct link to Enter Squirrels">​</a></h2>
<p>I created a Squirrels project to serve these analytics via a REST API. The project structure looks like this:</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">sqrl-1brc-postgres/</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">├── models/</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">│   ├── dbviews/</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">│   │   ├── aggregate_weather.sql</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">│   │   └── aggregate_weather.yml</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">│   └── sources.yml</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">├── .gitignore</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">├── env.yml</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">├── requirements.txt</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">└── squirrels.yml</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>The query (found in <code>models/dbviews/aggregate_weather.sql</code>) was slightly modified to use Squirrels' source macro:</p>
<div class="language-sql codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-sql codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">SELECT</span><span class="token plain"> city</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">MIN</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">temperature</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">MAX</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">temperature</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">AVG</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">temperature</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">FROM</span><span class="token plain"> {{ source</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"src_weather_data"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> }}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">GROUP</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">BY</span><span class="token plain"> city</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">ORDER</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">BY</span><span class="token plain"> city</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>The <code>models/sources.yml</code> file is used to tell Squirrels details about the source named "src_weather_data" including metadata about the table and columns.</p>
<p>The full Squirrels project can be found on GitHub <a href="https://github.com/squirrels-analytics/squirrels-examples/tree/main/sqrl-1brc-postgres" target="_blank" rel="noopener noreferrer">here</a>. This includes all files except for the env.yml file which looks something like this:</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">env_vars:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  postgres_uri: postgresql://postgres:********@postgres-db.************.us-east-1.rds.amazonaws.com:5432/postgres</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>The project dependencies were installed using <code>pip install -r requirements.txt</code>. This also installs the <code>sqrl</code> CLI tool for commands such as running the API server and building the data artifact.</p>
<p>After running <code>sqrl run --host 0.0.0.0 --no-cache</code> to start the API server, the REST API can be accessed with GET method at the endpoint:</p>
<ul>
<li>/squirrels-v0/1brc-postgres/v1/dataset/aggregate-weather</li>
</ul>
<p>First, I ran the API request without building the data artifact to get the baseline query performance. Then, I ran <code>sqrl build --stage</code> to build the necessary data artifact to improve query performance, and ran the API request again. The data artifact is stored in the <code>target/</code> folder and is about 5GB in size.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="performance-results">Performance Results<a href="https://squirrels-analytics.github.io/blog/1brc-postgres#performance-results" class="hash-link" aria-label="Direct link to Performance Results" title="Direct link to Performance Results">​</a></h2>
<p>The following are the performance results:</p>
<ol>
<li>Initial API Request: 419.51 seconds (≈7 minutes)</li>
<li>Running <code>sqrl build --stage</code>: 434.19 seconds</li>
<li>API request after running the build: <strong>15.93 seconds</strong></li>
</ol>
<p><strong>We successfully reduced the query runtime from 7 minutes to 15.93 seconds, a 26x performance improvement!</strong></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="handling-data-updates">Handling Data Updates<a href="https://squirrels-analytics.github.io/blog/1brc-postgres#handling-data-updates" class="hash-link" aria-label="Direct link to Handling Data Updates" title="Direct link to Handling Data Updates">​</a></h2>
<p>Squirrels makes it easy to handle incremental updates through update hints in <code>sources.yml</code> (notice the <code>update_hints</code> section below):</p>
<div class="language-yaml codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-yaml codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token key atrule" style="color:#00a4db">sources</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> src_weather_data</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">description</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> A table containing weather data</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">table</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> weather_data</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">update_hints</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token key atrule" style="color:#00a4db">increasing_column</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> id</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">columns</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">...</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>To test this, I:</p>
<ol>
<li>Added 1 million new rows to the PostgreSQL table</li>
<li>Ran <code>sqrl build --stage</code> (took 41.84 seconds) and confirmed that the data artifact was updated</li>
<li>Tested query performance (took <strong>15.66 seconds</strong> for 1.001 billion rows, similar to the 15.93 seconds for 1 billion rows)</li>
</ol>
<p>The <code>--stage</code> flag ensures zero downtime during updates by staging the development copy before swapping the data artifact once it's not in use by any ongoing queries. In addition, the <code>sqrl build</code> command can be run in the background at some time interval (e.g. every 10 minutes or every hour depending on data freshness requirements) to keep the data artifact up to date.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="behind-the-scenes-of-the-data-artifact">Behind the Scenes of the "Data Artifact"<a href="https://squirrels-analytics.github.io/blog/1brc-postgres#behind-the-scenes-of-the-data-artifact" class="hash-link" aria-label="Direct link to Behind the Scenes of the &quot;Data Artifact&quot;" title="Direct link to Behind the Scenes of the &quot;Data Artifact&quot;">​</a></h2>
<p>The "data artifact" is actually a <a href="https://duckdb.org/" target="_blank" rel="noopener noreferrer">DuckDB</a> database file. The <code>sqrl build</code> command is able to build the source table(s) as DuckDB table(s) if the source table are from PostgreSQL, MySQL, or SQLite. When running an API request, Squirrels will determine whether all the necessary source tables exist in the DuckDB database for PostgreSQL, MySQL, or SQLite queries. If they do, it will translate the SQL query into DuckDB's SQL dialect (using <a href="https://sqlglot.com/sqlglot.html" target="_blank" rel="noopener noreferrer">SQLGlot</a>) and run the query on the DuckDB file instead. Support for loading from additional sources (e.g. APIs, S3, etc.) with <code>sqrl build</code> will be made available in the future.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="conclusion">Conclusion<a href="https://squirrels-analytics.github.io/blog/1brc-postgres#conclusion" class="hash-link" aria-label="Direct link to Conclusion" title="Direct link to Conclusion">​</a></h2>
<p>Using Squirrels together with DuckDB, we achieved:</p>
<ul>
<li><strong>26x faster query performance</strong> on 1 billion rows without changing the PostgreSQL query</li>
<li>Simple incremental updates with zero-downtime refreshes</li>
</ul>
<p>While it is possible to optimize the PostgreSQL table for better performance, it often requires significant time and effort with only modest gains. In contrast, using Squirrels can achieve substantial performance improvements with minimal effort.</p>
<p>In Part 2, we'll explore dynamic parameterized queries that change based on user input for date ranges, and demonstrate how to join results from multiple databases and unstructured data from S3 in a single API request!</p>]]></content>
        <author>
            <name>Tim Huang</name>
            <uri>https://github.com/ty2huang</uri>
        </author>
        <category label="squirrels" term="squirrels"/>
        <category label="postgresql" term="postgresql"/>
        <category label="duckdb" term="duckdb"/>
        <category label="performance" term="performance"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Squirrels - What Problems Does It Solve?]]></title>
        <id>https://squirrels-analytics.github.io/blog/problems-solved</id>
        <link href="https://squirrels-analytics.github.io/blog/problems-solved"/>
        <updated>2024-09-07T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Squirrels is a REST API framework for data analytics. APIs built with this framework return datasets, dashboards, or parameters for datasets/dashboards. APIs for authentication, data catalog, and testing UI are also included.]]></summary>
        <content type="html"><![CDATA[<p>Squirrels is a REST API framework for data analytics. APIs built with this framework return datasets, dashboards, or parameters for datasets/dashboards. APIs for authentication, data catalog, and testing UI are also included.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="problems-solved">Problems Solved<a href="https://squirrels-analytics.github.io/blog/problems-solved#problems-solved" class="hash-link" aria-label="Direct link to Problems Solved" title="Direct link to Problems Solved">​</a></h2>
<p>The following are details on the problems that Squirrels is meant to solve:</p>
<ol>
<li>Embedded Analytics<!-- -->
<ul>
<li>Today, data professions may feel comfortable creating data analytics dashboards in BI tools like Tableau, Looker, and PowerBI. However, to embed data analytics into your own applications with the same “look and feel” is not possible to do with these popular BI tools</li>
</ul>
</li>
<li>Data Analytics Without Vendor Lock-in<!-- -->
<ul>
<li>Working with Squirrels is easy. You just need to install Python, run “pip install squirrels”, run “sqrl init” to create a working project, and run “sqrl run” to activate the API server. From here, you can run the API server in a Docker Container, and host it on your own cloud platform, all for free!</li>
</ul>
</li>
<li>Aligned Skillsets Across Data Analytics Responsibilities<!-- -->
<ul>
<li>Today, dbt has become popular as the go-to tool for offline data transformation pipelines because it lets analytics engineers use YAML, SQL (templated with Jinja), and sometimes Python to produce production-grade data pipelines. It gained popularity largely because of how ubiquitous SQL and Python skills are among data professionals. After creating cleaned/processed tables with dbt, these tables may be queried using tools like Tableau, Looker, PowerBI, Excel, etc. Tableau uses VizQL, Looker uses LookML, PowerBI uses DAX, and Excel uses its own syntax for Excel formulas. This means if an analytics engineer works with dbt and Tableau in one company, and then switched jobs to work with dbt and Looker instead, the engineer would need to learn a new query language for Looker. On the other hand, Squirrels lets you write your dynamic real-time queries with YAML, SQL (templated with Jinja), and sometimes Python, which is similar to dbt! So if that engineer switched into a job that uses dbt and Squirrels, he/she would already be an expert in both!</li>
<li>Analogously, NodeJS became popular because it allowed full-stack web developers to use the same language for both frontend and backend. This is similar to how dbt and Squirrels allow data professions to use the same language between offline data pipelines and dynamic real-time queries</li>
</ul>
</li>
</ol>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="competition">Competition<a href="https://squirrels-analytics.github.io/blog/problems-solved#competition" class="hash-link" aria-label="Direct link to Competition" title="Direct link to Competition">​</a></h2>
<p>Classifying other products/companies as “competition” depends on how broad of a use-case is considered. Simply considering products that assist with data analytics, then there are hundreds or thousands. If considering only products that are also API frameworks for data analytics in a git controllable project, <a href="http://cube.dev/" target="_blank" rel="noopener noreferrer">Cube</a> appears to be the only one that is well-known. However, looking at the three problems above, Cube does not solve the third. If considering products that also attempt to solve the three problems above, the following products have recently been introduced to the market, but neither have made a name for themselves yet.</p>
<ul>
<li><a href="https://tools.latitude.so/" target="_blank" rel="noopener noreferrer">Latitude</a></li>
<li><a href="https://vulcansql.com/" target="_blank" rel="noopener noreferrer">VulcanSQL</a></li>
</ul>
<p>However, there are a few features not available with one or more of these tools, but are available with Squirrels:</p>
<ul>
<li>Compatibility with Windows<!-- -->
<ul>
<li>Squirrels and VulcanSQL are compatible with all operating systems including Windows</li>
<li>Latitude is not compatible with Windows natively, but can be used on Windows with WSL</li>
</ul>
</li>
<li>Widget Parameters<!-- -->
<ul>
<li>Squirrels lets you define parameters as single-select, multi-select, date / date range, number / number range, or text parameters. It’s even possible get parameter options from a database or have cascading effects between options</li>
<li>Latitude and VulcanSQL allow for arbitrary parameter values passed as query parameters with no specification on parameter typing or parameter options</li>
</ul>
</li>
<li>Query Multiple Databases in One API Call<!-- -->
<ul>
<li>Squirrels differentiate data models by those that run on the external database (i.e. “database views”) and those that run in the API server (i.e. “federate views”). Federate views can join database views (or other federate views) even if they ran in different databases! Any database / data warehouse with a SQLAlchemy driver can be queried as a source for database views.</li>
<li>Latitude allows data models to reference another, but the chain of queries must be on the same database. No concept of “federate views” exist</li>
<li>VulcanSQL does not support data models referencing another. There can only be one source per project</li>
</ul>
</li>
<li>Data Models with Python Pandas<!-- -->
<ul>
<li>If SQL with Jinja is insufficient, data models in Squirrels can be created in Python as a function that return pandas dataframes</li>
<li>Latitude and VulcanSQL have no support for Python since both their backend are NodeJS</li>
</ul>
</li>
<li>Visualization Dashboards<!-- -->
<ul>
<li>Squirrels lets you create APIs that return dashboards as images or html. The dashboards are created in Python with your favourite Python data visualization library such as matplotlib or plotly</li>
<li>Latitude lets you create dashboards with Svelte, and uses their own syntax for components. Likely requires a higher learning curve</li>
<li>VulcanSQL has no support for dashboards</li>
</ul>
</li>
</ul>]]></content>
        <author>
            <name>Tim Huang</name>
            <uri>https://github.com/ty2huang</uri>
        </author>
        <category label="squirrels" term="squirrels"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Welcome to Squirrels]]></title>
        <id>https://squirrels-analytics.github.io/blog/welcome</id>
        <link href="https://squirrels-analytics.github.io/blog/welcome"/>
        <updated>2024-06-22T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Welcome to the official documentation website for Squirrels, an open-source project framework for building parameterizable REST APIs for dynamic data analytics! This is an easy-to-use framework for anyone who is familiar with SQL and YAML.]]></summary>
        <content type="html"><![CDATA[<p>Welcome to the official documentation website for <strong>Squirrels</strong>, an open-source project framework for building parameterizable REST APIs for dynamic data analytics! This is an easy-to-use framework for anyone who is familiar with SQL and YAML.</p>
<p>In today's web development world, REST APIs are known to be the "backbone of the internet". It allows two software applications across the world to communicate with each other and share data.</p>
<p>In today's data analytics world, requirements for data analytics and business intelligence are growing in most companies. But it often comes down to a few technical data experts to answer the growing number of data questions. For instance, suppose that today, a company executive asks for revenue by location for last year, and then tomorrow, asks for revenue by day of week for the last quarter only. For many organizations, these executives must rely on others to produce the required analytics rather than being able to retrieve the information themselves (for instance, by clicking a button in a graphical user interface). This often requires a lot of tedious work for the technical data experts to revise queries on a regular basis, even when several of these data queries take a similar shape but parameterized in different ways.</p>
<p>This is where Squirrels comes into play. It merges the two worlds of "REST APIs" and "data analytics" together! By creating dynamic datasets with a <strong>low-code</strong> framework and exposing them as REST APIs that accept query parameters and return a standard JSON structure, you allow others to self-serve the data analytics while having tight control over what they are allowed to query. And it's not just for internal analytics only, it can also be embedded in your customer-facing applications to expose analytics for external users!</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="why-is-it-named-squirrels">Why is it named "Squirrels"?<a href="https://squirrels-analytics.github.io/blog/welcome#why-is-it-named-squirrels" class="hash-link" aria-label="Direct link to Why is it named &quot;Squirrels&quot;?" title="Direct link to Why is it named &quot;Squirrels&quot;?">​</a></h2>
<p>First off, it seems to be the trend that many data-relevant tools are named after animals (Pandas, Koalas, Polars, DuckDB, etc.). Not to mention, Squirrels runs on Python, a programming language named after an animal as well.</p>
<p>But more importantly, the phonetics of the word "squirrels" sounds like a blend between SQL and URLs, which encapsulates the purpose of this framework very well.</p>]]></content>
        <author>
            <name>Tim Huang</name>
            <uri>https://github.com/ty2huang</uri>
        </author>
        <category label="welcome" term="welcome"/>
        <category label="squirrels" term="squirrels"/>
    </entry>
</feed>