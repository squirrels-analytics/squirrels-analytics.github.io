"use strict";(self.webpackChunksquirrels_docs=self.webpackChunksquirrels_docs||[]).push([[8005],{2331:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>d,contentTitle:()=>i,default:()=>h,frontMatter:()=>a,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"references/python/arguments/ModelArgs","title":"ModelArgs (class)","description":"The class for the \\"sqrl\\" argument of the main function of a Python [federate model], which runs per (uncached) API request for dataset results.","source":"@site/docs/references/python/arguments/ModelArgs.md","sourceDirName":"references/python/arguments","slug":"/references/python/arguments/ModelArgs","permalink":"/docs/references/python/arguments/ModelArgs","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"references","previous":{"title":"ContextArgs (class)","permalink":"/docs/references/python/arguments/ContextArgs"},"next":{"title":"DashboardArgs (class)","permalink":"/docs/references/python/arguments/DashboardArgs"}}');var t=r(4848),l=r(8453);const a={},i="ModelArgs (class)",d={},c=[{value:"Attributes",id:"attributes",level:2},{value:"project_path",id:"project_path",level:3},{value:"proj_vars",id:"proj_vars",level:3},{value:"env_vars",id:"env_vars",level:3},{value:"user",id:"user",level:3},{value:"prms",id:"prms",level:3},{value:"traits",id:"traits",level:3},{value:"placeholders",id:"placeholders",level:3},{value:"connections",id:"connections",level:3},{value:"dependencies",id:"dependencies",level:3},{value:"ctx",id:"ctx",level:3},{value:"Methods",id:"methods",level:2},{value:"set_placeholder",id:"set_placeholder",level:3},{value:"param_exists",id:"param_exists",level:3},{value:"ref",id:"ref",level:3},{value:"is_placeholder",id:"is_placeholder",level:3},{value:"get_placeholder_value",id:"get_placeholder_value",level:3},{value:"run_external_sql",id:"run_external_sql",level:3},{value:"run_sql_on_dataframes",id:"run_sql_on_dataframes",level:3}];function o(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",strong:"strong",ul:"ul",...(0,l.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"modelargs-class",children:"ModelArgs (class)"})}),"\n",(0,t.jsxs)(n.p,{children:['The class for the "sqrl" argument of the main function of a Python ',(0,t.jsx)(n.a,{href:"../../../docs/concepts/models-federate",children:"federate model"}),", which runs per (uncached) API request for dataset results."]}),"\n",(0,t.jsxs)(n.p,{children:["Can be imported from the module ",(0,t.jsx)(n.code,{children:"squirrels.arguments"})," or ",(0,t.jsx)(n.code,{children:"squirrels"}),"."]}),"\n",(0,t.jsx)(n.h2,{id:"attributes",children:"Attributes"}),"\n",(0,t.jsx)(n.p,{children:"Attributes of ModelArgs that can be accessed."}),"\n",(0,t.jsx)(n.h3,{id:"project_path",children:"project_path"}),"\n",(0,t.jsx)(n.p,{children:"The path to the project directory."}),"\n",(0,t.jsx)(n.h3,{id:"proj_vars",children:"proj_vars"}),"\n",(0,t.jsxs)(n.p,{children:["A dictionary to access a project variable defined in ",(0,t.jsx)(n.a,{href:"../../../docs/concepts/squirrels-yml",children:"squirrels.yml"}),"."]}),"\n",(0,t.jsx)(n.h3,{id:"env_vars",children:"env_vars"}),"\n",(0,t.jsxs)(n.p,{children:["A dictionary of ",(0,t.jsx)(n.a,{href:"../../../docs/concepts/environment",children:"environment variables"}),"."]}),"\n",(0,t.jsx)(n.h3,{id:"user",children:"user"}),"\n",(0,t.jsxs)(n.p,{children:["The authenticated user of type ",(0,t.jsx)(n.a,{href:"../../../tba",children:"BaseUser"})," or User (defined in ",(0,t.jsx)(n.a,{href:"../../../docs/concepts/user",children:"user.py"}),", if applicable), or None if no user authenticated."]}),"\n",(0,t.jsx)(n.h3,{id:"prms",children:"prms"}),"\n",(0,t.jsx)(n.p,{children:"A dictionary of parameter objects (containing the real-time parameter selections) by parameter name."}),"\n",(0,t.jsx)(n.h3,{id:"traits",children:"traits"}),"\n",(0,t.jsx)(n.p,{children:"A dictionary of the dataset traits."}),"\n",(0,t.jsx)(n.h3,{id:"placeholders",children:"placeholders"}),"\n",(0,t.jsx)(n.p,{children:"A dictionary of placeholder name to placeholder value."}),"\n",(0,t.jsx)(n.h3,{id:"connections",children:"connections"}),"\n",(0,t.jsxs)(n.p,{children:["A dictionary of connection keys to database connections, which are typically ",(0,t.jsx)(n.a,{href:"../../../tba",children:"ConnectionProperties"})," objects. Can also be used to store other in-memory objects in advance such as ML models."]}),"\n",(0,t.jsx)(n.h3,{id:"dependencies",children:"dependencies"}),"\n",(0,t.jsx)(n.p,{children:"The set of dependent data model names."}),"\n",(0,t.jsx)(n.h3,{id:"ctx",children:"ctx"}),"\n",(0,t.jsxs)(n.p,{children:["A dictionary of context variables (often defined based on the real-time parameter selections) defined in ",(0,t.jsx)(n.a,{href:"../../../docs/concepts/context",children:"context.py"}),"."]}),"\n",(0,t.jsx)(n.h2,{id:"methods",children:"Methods"}),"\n",(0,t.jsx)(n.p,{children:"Methods that can be invoked from ModelArgs."}),"\n",(0,t.jsx)(n.h3,{id:"set_placeholder",children:"set_placeholder"}),"\n",(0,t.jsx)(n.p,{children:"Sets a placeholder value."}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Required Arguments:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"placeholder"}),": A string for the placeholder name"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"value"}),": A value of any type for the placeholder"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"param_exists",children:"param_exists"}),"\n",(0,t.jsx)(n.p,{children:"Checks whether a parameter exists and is enabled"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Required Arguments:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"param_name"}),": A string for the parameter name"]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Returns:"})," A boolean for whether the parameter name exists and is enabled"]}),"\n",(0,t.jsx)(n.h3,{id:"ref",children:"ref"}),"\n",(0,t.jsx)(n.p,{children:"Returns the result (as polars DataFrame) of a dependent model."}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Required Arguments"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"model"}),": A string for the dependent model name"]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Returns:"})," A polars LazyFrame."]}),"\n",(0,t.jsx)(n.h3,{id:"is_placeholder",children:"is_placeholder"}),"\n",(0,t.jsx)(n.p,{children:"Checks whether a name is a valid placeholder"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Required Arguments"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"placeholder"}),": A string for the placeholder name"]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Returns:"})," A boolean for whether the placeholder name is valid"]}),"\n",(0,t.jsx)(n.h3,{id:"get_placeholder_value",children:"get_placeholder_value"}),"\n",(0,t.jsx)(n.p,{children:"Gets the value of a placeholder."}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"USE WITH CAUTION"}),". Do not use the return value directly in a SQL query since that could be prone to SQL injection"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Required Arguments"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"placeholder"}),": A string for the placeholder name"]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Returns:"})," Returns the value of the placeholder (can by any type) or None if the placeholder doesn't exist"]}),"\n",(0,t.jsx)(n.h3,{id:"run_external_sql",children:"run_external_sql"}),"\n",(0,t.jsx)(n.p,{children:"Runs a SQL query against an external database, with option to specify the connection name. Placeholder values are provided automatically."}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Required Arguments:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"connection_name"}),": The connection name for the database"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"sql_query"}),": The SQL query. Can be parameterized with placeholders if the connection is a SQLAlchemy connection"]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Returns:"})," The query result as a polars DataFrame"]}),"\n",(0,t.jsx)(n.h3,{id:"run_sql_on_dataframes",children:"run_sql_on_dataframes"}),"\n",(0,t.jsx)(n.p,{children:"Uses a dictionary of dataframes to execute a SQL query in an embedded in-memory DuckDB database."}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Required Arguments:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"sql_query"}),": The SQL query to run"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Optional Keyword Arguments:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"dataframes"}),': A dictionary of table names to their polars LazyFrame. If None, uses results of dependent models defined in the "dependencies" attribute']}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Returns:"})," The result as a polars DataFrame from running the query"]})]})}function h(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(o,{...e})}):o(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>a,x:()=>i});var s=r(6540);const t={},l=s.createContext(t);function a(e){const n=s.useContext(l);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),s.createElement(l.Provider,{value:n},e.children)}}}]);