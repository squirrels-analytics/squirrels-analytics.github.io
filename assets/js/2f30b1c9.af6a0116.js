"use strict";(self.webpackChunksquirrels_docs=self.webpackChunksquirrels_docs||[]).push([[9353],{291:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>s,default:()=>h,frontMatter:()=>i,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"references/python/connections/ConnectionProperties","title":"ConnectionProperties (class)","description":"A class for holding the properties of a database connection in the Squirrels framework.","source":"@site/docs/references/python/connections/ConnectionProperties.md","sourceDirName":"references/python/connections","slug":"/references/python/connections/ConnectionProperties","permalink":"/docs/references/python/connections/ConnectionProperties","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"references","previous":{"title":"ConnectionTypeEnum (enum)","permalink":"/docs/references/python/connections/ConnectionTypeEnum"},"next":{"title":"squirrels.dashboards (module)","permalink":"/docs/references/python/dashboards"}}');var o=t(4848),c=t(8453);const i={},s="ConnectionProperties (class)",a={},l=[{value:"Constructor",id:"constructor",level:2},{value:"Attributes",id:"attributes",level:2},{value:"label",id:"label",level:3},{value:"type",id:"type",level:3},{value:"uri",id:"uri",level:3},{value:"sa_create_engine_args",id:"sa_create_engine_args",level:3},{value:"engine",id:"engine",level:3},{value:"dialect",id:"dialect",level:3},{value:"attach_uri_for_duckdb",id:"attach_uri_for_duckdb",level:3},{value:"Example",id:"example",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,c.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"connectionproperties-class",children:"ConnectionProperties (class)"})}),"\n",(0,o.jsx)(n.p,{children:"A class for holding the properties of a database connection in the Squirrels framework."}),"\n",(0,o.jsxs)(n.p,{children:["Can be imported from the module ",(0,o.jsx)(n.code,{children:"squirrels.connections"})," or ",(0,o.jsx)(n.code,{children:"squirrels"}),"."]}),"\n",(0,o.jsx)(n.h2,{id:"constructor",children:"Constructor"}),"\n",(0,o.jsx)(n.p,{children:"Creates a ConnectionProperties object."}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Keyword Arguments:"})}),"\n",(0,o.jsx)(n.p,{children:"The only required keyword argument to the constructor is:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.code,{children:"uri"})}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:"In addition, the constructor accepts the following optional keyword arguments:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.code,{children:"label"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.code,{children:"type"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.code,{children:"sa_create_engine_args"})}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:"All of the above arguments are also attributes of the class. See the Attributes section below for more information on each."}),"\n",(0,o.jsx)(n.h2,{id:"attributes",children:"Attributes"}),"\n",(0,o.jsx)(n.p,{children:"Attributes of ConnectionProperties that can be accessed."}),"\n",(0,o.jsx)(n.h3,{id:"label",children:"label"}),"\n",(0,o.jsxs)(n.p,{children:["Optional label for the connection. Default is ",(0,o.jsx)(n.code,{children:"None"}),"."]}),"\n",(0,o.jsx)(n.h3,{id:"type",children:"type"}),"\n",(0,o.jsxs)(n.p,{children:["The type of connection as an instance of ",(0,o.jsx)(n.a,{href:"./ConnectionTypeEnum",children:"ConnectionTypeEnum"}),". Default is ",(0,o.jsx)(n.code,{children:"ConnectionTypeEnum.SQLALCHEMY"}),"."]}),"\n",(0,o.jsx)(n.h3,{id:"uri",children:"uri"}),"\n",(0,o.jsx)(n.p,{children:"The URI for the database connection."}),"\n",(0,o.jsx)(n.h3,{id:"sa_create_engine_args",children:"sa_create_engine_args"}),"\n",(0,o.jsxs)(n.p,{children:["Additional arguments to pass to SQLAlchemy's ",(0,o.jsx)(n.code,{children:"create_engine"})," function if the connection type is ",(0,o.jsx)(n.code,{children:"SQLALCHEMY"}),". Default is an empty dictionary."]}),"\n",(0,o.jsx)(n.h3,{id:"engine",children:"engine"}),"\n",(0,o.jsxs)(n.p,{children:["A cached property that creates and returns a SQLAlchemy engine instance if the connection type is ",(0,o.jsx)(n.code,{children:"SQLALCHEMY"}),". Raises a ",(0,o.jsx)(n.code,{children:"ValueError"})," for other connection types."]}),"\n",(0,o.jsx)(n.h3,{id:"dialect",children:"dialect"}),"\n",(0,o.jsx)(n.p,{children:"A cached property that determines the database dialect from the connection. Returns the detected database dialect (e.g., 'sqlite', 'postgres', 'mysql') as a string."}),"\n",(0,o.jsx)(n.h3,{id:"attach_uri_for_duckdb",children:"attach_uri_for_duckdb"}),"\n",(0,o.jsxs)(n.p,{children:["A cached property that generates a connection string suitable for DuckDB attachments. Returns a formatted connection string for DuckDB or ",(0,o.jsx)(n.code,{children:"None"})," if the dialect is not supported."]}),"\n",(0,o.jsx)(n.h2,{id:"example",children:"Example"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'from squirrels import connections as cn\n\n# Create a SQLite connection\nconnection = cn.ConnectionProperties(\n    label="my_database",\n    type=cn.ConnectionTypeEnum.SQLALCHEMY,\n    uri="sqlite:///path/to/database.db"\n)\n\n# Access the engine\nengine = connection.engine\n\n# Get the dialect\ndialect = connection.dialect\n'})})]})}function h(e={}){const{wrapper:n}={...(0,c.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>s});var r=t(6540);const o={},c=r.createContext(o);function i(e){const n=r.useContext(c);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),r.createElement(c.Provider,{value:n},e.children)}}}]);