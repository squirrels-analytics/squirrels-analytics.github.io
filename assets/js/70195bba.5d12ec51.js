"use strict";(self.webpackChunksquirrels_docs=self.webpackChunksquirrels_docs||[]).push([[2206],{4887:(e,s,r)=>{r.r(s),r.d(s,{assets:()=>o,contentTitle:()=>l,default:()=>h,frontMatter:()=>i,metadata:()=>n,toc:()=>c});const n=JSON.parse('{"id":"docs/concepts/context","title":"Context Variables & Placeholders","description":"Context variables allow you to transform raw values from user attributes or parameter selections into more useful values that can be directly consumed by your SQL or Python models.","source":"@site/docs/docs/concepts/context.md","sourceDirName":"docs/concepts","slug":"/docs/concepts/context","permalink":"/docs/docs/concepts/context","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"docs","previous":{"title":"Widget Parameters","permalink":"/docs/docs/concepts/parameters"},"next":{"title":"Macros & Filters","permalink":"/docs/docs/concepts/macros"}}');var t=r(4848),a=r(8453);const i={},l="Context Variables & Placeholders",o={},c=[{value:"Overview",id:"overview",level:2},{value:"How Context Variables Work",id:"how-context-variables-work",level:2},{value:"The Context Function",id:"the-context-function",level:2},{value:"The <code>sqrl</code> Argument",id:"the-sqrl-argument",level:2},{value:"Properties",id:"properties",level:3},{value:"Methods",id:"methods",level:3},{value:"Parameter Type Safety",id:"parameter-type-safety",level:2},{value:"Common Transformations",id:"common-transformations",level:2},{value:"Examples",id:"examples",level:2},{value:"Date Parameters",id:"date-parameters",level:3},{value:"Group By Parameters",id:"group-by-parameters",level:3},{value:"Filter Parameters",id:"filter-parameters",level:3},{value:"Using Authenticated User Information",id:"using-authenticated-user-information",level:3},{value:"Using Placeholders for Text Parameters",id:"using-placeholders-for-text-parameters",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"Using Context Variables in Models",id:"using-context-variables-in-models",level:2},{value:"In SQL Models",id:"in-sql-models",level:3},{value:"In Python Models",id:"in-python-models",level:3}];function d(e){const s={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,a.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(s.header,{children:(0,t.jsx)(s.h1,{id:"context-variables--placeholders",children:"Context Variables & Placeholders"})}),"\n",(0,t.jsx)(s.p,{children:"Context variables allow you to transform raw values from user attributes or parameter selections into more useful values that can be directly consumed by your SQL or Python models."}),"\n",(0,t.jsx)(s.p,{children:"For text parameters, placeholders must be used instead of context variables to avoid risking SQL injection. Placeholders can also be used for other parameter types."}),"\n",(0,t.jsx)(s.h2,{id:"overview",children:"Overview"}),"\n",(0,t.jsxs)(s.p,{children:["Context variables and placeholders are defined in the ",(0,t.jsx)(s.code,{children:"pyconfigs/context.py"})," file and are created in real-time after a user makes parameter selections. These variables can then be referenced in your model files to create dynamic queries that respond to user inputs."]}),"\n",(0,t.jsxs)(s.p,{children:["To create a sample ",(0,t.jsx)(s.code,{children:"pyconfigs/context.py"})," file, you can run:"]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-bash",children:"sqrl get-file context.py\n"})}),"\n",(0,t.jsx)(s.h2,{id:"how-context-variables-work",children:"How Context Variables Work"}),"\n",(0,t.jsxs)(s.ol,{children:["\n",(0,t.jsxs)(s.li,{children:["When a user makes parameter selections in the UI, those selections are passed to the ",(0,t.jsx)(s.code,{children:"main()"})," function in ",(0,t.jsx)(s.code,{children:"context.py"})]}),"\n",(0,t.jsxs)(s.li,{children:["The ",(0,t.jsx)(s.code,{children:"main()"})," function transforms these raw selections into meaningful values, and either adds them to the ",(0,t.jsx)(s.code,{children:"ctx"})," dictionary as context variables or set them as placeholders using ",(0,t.jsx)(s.code,{children:"sqrl.set_placeholder()"})]}),"\n",(0,t.jsx)(s.li,{children:"These context variables become available to use in your SQL or Python models"}),"\n"]}),"\n",(0,t.jsx)(s.h2,{id:"the-context-function",children:"The Context Function"}),"\n",(0,t.jsxs)(s.p,{children:["The main function in ",(0,t.jsx)(s.code,{children:"context.py"})," has the following signature:"]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-python",children:"from typing import Any\nfrom squirrels import ContextArgs, parameters as p\n\ndef main(ctx: dict[str, Any], sqrl: ContextArgs) -> None:\n    # Your code here\n"})}),"\n",(0,t.jsx)(s.p,{children:"Parameters:"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"ctx"}),": A dictionary where you'll store your context variables"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"sqrl"}),": A ",(0,t.jsx)(s.a,{href:"../../tba",children:"ContextArgs"})," object containing parameter selections and other useful information"]}),"\n"]}),"\n",(0,t.jsxs)(s.h2,{id:"the-sqrl-argument",children:["The ",(0,t.jsx)(s.code,{children:"sqrl"})," Argument"]}),"\n",(0,t.jsxs)(s.p,{children:["The ",(0,t.jsx)(s.code,{children:"sqrl"})," argument is an instance of ",(0,t.jsx)(s.a,{href:"../../tba",children:"ContextArgs"})," that provides access to various runtime information including:"]}),"\n",(0,t.jsx)(s.h3,{id:"properties",children:"Properties"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"sqrl.prms"}),": Access to all parameter objects (dictionary of parameter names to Parameter objects)"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"sqrl.traits"}),": Dataset-specific traits defined in the dataset configuration"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"sqrl.user"}),": Information about the authenticated user (if authentication is enabled)"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"sqrl.proj_vars"}),": Project-level variables defined in project configuration"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"sqrl.env_vars"}),": Environment variables"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"sqrl.placeholders"}),": Dictionary of placeholder values used in SQL queries"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"sqrl.project_path"}),": Path to the project root directory"]}),"\n"]}),"\n",(0,t.jsx)(s.h3,{id:"methods",children:"Methods"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"sqrl.param_exists(name)"}),": Check if a parameter exists and is enabled"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"sqrl.set_placeholder(name, value)"}),": Set a placeholder value for SQL queries"]}),"\n"]}),"\n",(0,t.jsx)(s.h2,{id:"parameter-type-safety",children:"Parameter Type Safety"}),"\n",(0,t.jsx)(s.p,{children:"Always verify the parameter type before using parameter-specific methods. This can usually help Python code editors provide useful autocomplete suggestions for the parameter type."}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-python",children:'if sqrl.param_exists("limit"):\n    limit_param = sqrl.prms["limit"]\n    assert isinstance(limit_param, p.NumberParameter)\n    ctx["limit_value"] = limit_param.get_selected_value()\n'})}),"\n",(0,t.jsx)(s.h2,{id:"common-transformations",children:"Common Transformations"}),"\n",(0,t.jsx)(s.p,{children:"Context variables are commonly used for:"}),"\n",(0,t.jsxs)(s.ol,{children:["\n",(0,t.jsx)(s.li,{children:"Building column names for SQL clauses (SELECT, WHERE, GROUP BY, ORDER BY, etc.)"}),"\n",(0,t.jsx)(s.li,{children:"Formatting dates and numbers for SQL queries"}),"\n",(0,t.jsx)(s.li,{children:"Creating lists or dictionaries from multi-select parameters"}),"\n",(0,t.jsx)(s.li,{children:"Handling conditional logic based on user selections"}),"\n"]}),"\n",(0,t.jsx)(s.h2,{id:"examples",children:"Examples"}),"\n",(0,t.jsx)(s.h3,{id:"date-parameters",children:"Date Parameters"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-python",children:'if sqrl.param_exists("start_date"):\n    start_date_param = sqrl.prms["start_date"]\n    assert isinstance(start_date_param, p.DateParameter)\n    ctx["start_date"] = start_date_param.get_selected_date() # string\nelse:\n    ctx["start_date"] = "1900-01-01"\n'})}),"\n",(0,t.jsx)(s.h3,{id:"group-by-parameters",children:"Group By Parameters"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-python",children:'if sqrl.param_exists("group_by"):\n    group_by_param = sqrl.prms["group_by"]\n    assert isinstance(group_by_param, p.SingleSelectParameter)\n    \n    columns = group_by_param.get_selected("columns")\n    aliases = group_by_param.get_selected("aliases", default_field="columns")\n    \n    ctx["select_dim_cols"] = ", ".join(x+" as "+y for x, y in zip(columns, aliases))\n    ctx["group_by_cols"] = ", ".join(columns)\n'})}),"\n",(0,t.jsx)(s.h3,{id:"filter-parameters",children:"Filter Parameters"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-python",children:'if sqrl.param_exists("category"):\n    category_param = sqrl.prms["category"]\n    assert isinstance(category_param, p.MultiSelectParameter)\n    ctx["has_categories"] = category_param.has_non_empty_selection() # boolean\n    ctx["categories"] = category_param.get_selected_ids_as_list() # list of strings\nelse:\n    ctx["has_categories"] = False\n'})}),"\n",(0,t.jsx)(s.h3,{id:"using-authenticated-user-information",children:"Using Authenticated User Information"}),"\n",(0,t.jsxs)(s.p,{children:["The ",(0,t.jsx)(s.code,{children:"sqrl.user"})," object contains information about the currently authenticated user. You can use this to create personalized context variables:"]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-python",children:'# Check if user is authenticated\nif sqrl.user is not None:\n    ctx["is_manager"] = (getattr(sqrl.user, "role") == "manager")\nelse:\n    ctx["is_manager"] = False\n'})}),"\n",(0,t.jsxs)(s.p,{children:['By default, the sqrl.user object has "username" and "is_admin" attributes if it\'s not None. You can see the ',(0,t.jsx)(s.a,{href:"./user",children:"user.py"})," file in the ",(0,t.jsx)(s.code,{children:"pyconfigs/"})," folder (if exists) for any custom user attributes."]}),"\n",(0,t.jsx)(s.h3,{id:"using-placeholders-for-text-parameters",children:"Using Placeholders for Text Parameters"}),"\n",(0,t.jsx)(s.p,{children:"Placeholders are special values that can be safely used in SQL queries. Using placeholders is required when working with text parameters (where the text input is free-form). Using placeholders derived from selected values of other parameter types is possible as well."}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-python",children:'# Set a placeholder for a user input that needs to be sanitized\nif sqrl.param_exists("search_term"):\n    search_term = sqrl.prms["search_term"]\n    assert isinstance(search_term, p.TextParameter)\n    user_input = search_term.get_entered_text() # a squirrels.TextValue object\n    \n    # Set the placeholder - this will be safely escaped in SQL\n    sqrl.set_placeholder("search_input", user_input.apply_percent_wrap())\n'})}),"\n",(0,t.jsx)(s.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,t.jsxs)(s.ol,{children:["\n",(0,t.jsx)(s.li,{children:"Always check if a parameter exists before accessing it"}),"\n",(0,t.jsxs)(s.li,{children:["Validate parameter types with ",(0,t.jsx)(s.code,{children:"isinstance()"})]}),"\n",(0,t.jsx)(s.li,{children:"Use descriptive and consistent naming for context variables"}),"\n",(0,t.jsx)(s.li,{children:"Group related transformations together"}),"\n",(0,t.jsx)(s.li,{children:"Keep the context function modular and organized by parameter type"}),"\n",(0,t.jsx)(s.li,{children:"Use context variables to simplify complex logic in your model files"}),"\n",(0,t.jsx)(s.li,{children:"For user-based security, create context variables that restrict data access based on user roles"}),"\n"]}),"\n",(0,t.jsx)(s.h2,{id:"using-context-variables-in-models",children:"Using Context Variables in Models"}),"\n",(0,t.jsx)(s.h3,{id:"in-sql-models",children:"In SQL Models"}),"\n",(0,t.jsxs)(s.p,{children:["The context variables dictionary is available in SQL models as a variable called ",(0,t.jsx)(s.code,{children:"ctx"})," for dbview and federate models. You can access dictionary keys using the following Jinja syntax:"]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-sql",children:"SELECT * FROM my_table\nWHERE date BETWEEN '{{ ctx.start_date }}' AND '{{ ctx.end_date }}'\n"})}),"\n",(0,t.jsxs)(s.p,{children:["For placeholders defined via ",(0,t.jsx)(s.code,{children:"sqrl.set_placeholder()"})," in the ",(0,t.jsx)(s.code,{children:"context.py"})," file, you can use SQLAlchemy's syntax for named parameters (",(0,t.jsx)(s.code,{children:":param_name"}),") for dbview models, or DuckDB's syntax for named parameters (",(0,t.jsx)(s.code,{children:"$param_name"}),") for federate models:"]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-sql",children:"SELECT * FROM my_table\nWHERE description LIKE $search_input -- or :search_input for dbview models\n"})}),"\n",(0,t.jsxs)(s.p,{children:["For the ",(0,t.jsx)(s.a,{href:"../../references/cli/compile",children:"sqrl compile"})," command, placeholder values are not replaced with their actual values due to possible confusion if a SQL injection attack is attempted in the test set. Instead, the placeholder values are provided in a json file in the ",(0,t.jsx)(s.code,{children:"target/compile/"})," directory."]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{children:"target/compile/<dataset>/<test_set>/\n\u251c\u2500\u2500 dbviews/\n\u251c\u2500\u2500 federates/\n\u2514\u2500\u2500 placeholders.json\n"})}),"\n",(0,t.jsxs)(s.p,{children:["These details are also available in the ",(0,t.jsx)(s.a,{href:"../guides/sql-injection",children:"Avoid SQL Injection"})," guide."]}),"\n",(0,t.jsx)(s.h3,{id:"in-python-models",children:"In Python Models"}),"\n",(0,t.jsxs)(s.p,{children:['Context variables are available in Python data models for federate models only. The following is an example of a federate model using the context variables "has_categories" and "categories" by accessing the ',(0,t.jsx)(s.code,{children:"ctx"})," property of the ",(0,t.jsx)(s.code,{children:"sqrl"})," argument:"]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-python",children:'from squirrels import ModelArgs\nimport polars as pl, pandas as pd\n\ndef main(sqrl: ModelArgs) -> pl.LazyFrame | pl.DataFrame | pd.DataFrame:\n    df: pl.LazyFrame = sqrl.ref("my_source")\n    \n    if sqrl.ctx["has_categories"]:\n        categories_list = sqrl.ctx["categories"]\n        df = df.filter(pl.col("category_id").is_in(categories_list))\n\n    return df\n'})}),"\n",(0,t.jsxs)(s.p,{children:["The ",(0,t.jsx)(s.code,{children:"sqrl"})," argument also contains methods ",(0,t.jsx)(s.code,{children:"is_placeholder(name)"})," and ",(0,t.jsx)(s.code,{children:"get_placeholder_value(name)"})," for checking if a placeholder exists and getting the value for the placeholder."]})]})}function h(e={}){const{wrapper:s}={...(0,a.R)(),...e.components};return s?(0,t.jsx)(s,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},8453:(e,s,r)=>{r.d(s,{R:()=>i,x:()=>l});var n=r(6540);const t={},a=n.createContext(t);function i(e){const s=n.useContext(a);return n.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function l(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:i(e.components),n.createElement(a.Provider,{value:s},e.children)}}}]);