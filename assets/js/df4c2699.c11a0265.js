"use strict";(self.webpackChunksquirrels_docs=self.webpackChunksquirrels_docs||[]).push([[2044],{3370:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>d,contentTitle:()=>i,default:()=>c,frontMatter:()=>o,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"docs/topics/dashboards","title":"Dashboards","description":"With Squirrels, you can create visualization dashboards from your datasets and serve them as API endpoints with parameters.","source":"@site/versioned_docs/version-0.4.x/docs/topics/dashboards.md","sourceDirName":"docs/topics","slug":"/docs/topics/dashboards","permalink":"/docs/0.4.x/docs/topics/dashboards","draft":false,"unlisted":false,"tags":[],"version":"0.4.x","frontMatter":{},"sidebar":"docs","previous":{"title":"Seeds","permalink":"/docs/0.4.x/docs/topics/seeds"},"next":{"title":"Authentication","permalink":"/docs/0.4.x/docs/topics/auth"}}');var n=t(4848),r=t(8453);const o={},i="Dashboards",d={},l=[{value:"Working with the Python File",id:"working-with-the-python-file",level:2},{value:"More information on <code>sqrl.dataset</code> function",id:"more-information-on-sqrldataset-function",level:3}];function h(e){const a={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,r.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(a.header,{children:(0,n.jsx)(a.h1,{id:"dashboards",children:"Dashboards"})}),"\n",(0,n.jsx)(a.p,{children:"With Squirrels, you can create visualization dashboards from your datasets and serve them as API endpoints with parameters."}),"\n",(0,n.jsxs)(a.p,{children:["You can use the ",(0,n.jsx)(a.a,{href:"../../references/cli/get-file",children:"sqrl get-file"})," command to create an example dashboard:"]}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-bash",children:"sqrl get-file dashboard_example\n"})}),"\n",(0,n.jsxs)(a.p,{children:["This creates a dashboard ",(0,n.jsx)(a.code,{children:"dashboard_example.py"})," file in the ",(0,n.jsx)(a.code,{children:"dashboards/"})," folder."]}),"\n",(0,n.jsxs)(a.p,{children:['However, you also need a "dashboards" section in ',(0,n.jsx)(a.a,{href:"./project-file",children:"squirrels.yml"})," file. You can create a sample ",(0,n.jsx)(a.a,{href:"./project-file",children:"squirrels.yml"})," file with a dashboards section by running:"]}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-bash",children:"sqrl get-file squirrels.yml --dashboards\n"})}),"\n",(0,n.jsx)(a.h2,{id:"working-with-the-python-file",children:"Working with the Python File"}),"\n",(0,n.jsxs)(a.p,{children:["The contents of dashboards are Python files under the ",(0,n.jsx)(a.code,{children:"dashboards/"})," folder in the Squirrels project. The name of the Python file must match the name of the dashboard defined in ",(0,n.jsx)(a.a,{href:"./project-file",children:"squirrels.yml"}),"."]}),"\n",(0,n.jsx)(a.p,{children:"The main ideas are simple. In the main function of the Python file, you:"}),"\n",(0,n.jsxs)(a.ol,{children:["\n",(0,n.jsxs)(a.li,{children:["Use the ",(0,n.jsx)(a.code,{children:"sqrl.dataset"})," method to retrieve dataset(s) as a pandas DataFrame(s)."]}),"\n",(0,n.jsx)(a.li,{children:"Create plots from the dataset(s) as either a matplotlib figure, bytes/bytes buffer for a PNG image, or string/string buffer for an HTML representation."}),"\n",(0,n.jsxs)(a.li,{children:["Return the plots as an instance of one of the Dashboard classes from ",(0,n.jsx)(a.code,{children:"squirrels.dashboards"}),". For example, a ",(0,n.jsx)(a.a,{href:"../../references/python/dashboards/PngDashboard",children:"PngDashboard"})," can be constructed by passing either a matplotlib figure or bytes/bytes buffer as the only argument, or an ",(0,n.jsx)(a.a,{href:"../../references/python/dashboards/HtmlDashboard",children:"HtmlDashboard"})," can be constructed by passing either a string/string buffer as the only argument."]}),"\n"]}),"\n",(0,n.jsx)(a.p,{children:"Below is a simple example of what a dashboard Python file can look like:"}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-python",children:'from squirrels import DashboardArgs, dashboards as d\nfrom matplotlib import pyplot as plt\n\nasync def main(sqrl: DashboardArgs) -> d.PngDashboard:\n    df = await sqrl.dataset("dataset_example")\n\n    fig, ax = plt.subplots()\n\n    df.plot(x="col1", y="col2", ax=ax)\n\n    return d.PngDashboard(fig)\n'})}),"\n",(0,n.jsx)(a.p,{children:"Although this example uses matplotlib as the Python graphing library, you can use any library you like, as long as the graphs can be converted to a PNG image or HTML string. For instance, you can use the plotly library (which would require you to pip install plotly) to create interactive HTML graphs. Example code is provided below for illustration purposes:"}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-python",children:'from squirrels import DashboardArgs, dashboards as d\nimport plotly.express as px, io\n\nasync def main(sqrl: DashboardArgs) -> d.HtmlDashboard:\n    df = await sqrl.dataset("dataset_example")\n\n    fig = px.scatter(df, x="col1", y="col2")\n\n    buffer = io.StringIO()\n    fig.write_html(buffer)\n\n    return d.HtmlDashboard(buffer)\n'})}),"\n",(0,n.jsx)(a.p,{children:"Similarly, the last few lines can be changed as such to return a PNG image instead:"}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-python",children:'...\nasync def main(sqrl: DashboardArgs) -> d.PngDashboard:\n    ...\n    buffer = io.BytesIO()\n    fig.write_image(buffer, format="png")\n\n    return d.PngDashboard(buffer)\n'})}),"\n",(0,n.jsxs)(a.admonition,{type:"important",children:[(0,n.jsx)(a.p,{children:"Always set the return type of the main function appropriately!"}),(0,n.jsx)(a.p,{children:"Squirrels uses the signature of the main function to determine the output format of the dashboard (i.e. PNG, HTML, etc.). This format is provided in the output of the data catalog API such that the front-end client knows what to expect and how to render the dashboard."})]}),"\n",(0,n.jsx)(a.admonition,{type:"tip",children:(0,n.jsxs)(a.p,{children:["It is often easier to experiment in a Jupyter notebook first (to create a static dashboard) before moving the code to a dashboard Python file to create a dynamic dashboard. See ",(0,n.jsx)(a.a,{href:"./interact-in-python",children:"Interacting with Squirrels in Python"})," for more details."]})}),"\n",(0,n.jsxs)(a.h3,{id:"more-information-on-sqrldataset-function",children:["More information on ",(0,n.jsx)(a.code,{children:"sqrl.dataset"})," function"]}),"\n",(0,n.jsxs)(a.p,{children:["The ",(0,n.jsx)(a.code,{children:"sqrl.dataset"})," function is analogous to using the REST API to retrieve a dataset, except that is returns a pandas DataFrame instead of JSON. It is an asynchronous function so it must be called with the ",(0,n.jsx)(a.code,{children:"await"})," keyword (or handled with methods that deal with Python async functions)."]}),"\n",(0,n.jsxs)(a.p,{children:["The ",(0,n.jsx)(a.code,{children:"sqrl.dataset"})," function takes an optional keyword argument for ",(0,n.jsx)(a.strong,{children:"fixed_parameters"}),". This is a dictionary of parameter names to selected ID(s), similar to how you would use the dataset result REST API query parameters to specify specific parameter selections."]}),"\n",(0,n.jsxs)(a.p,{children:["In addition, parameters can be made available to the dashboard for real-time parameter selections as well by configuring it in the ",(0,n.jsx)(a.a,{href:"./project-file",children:"squirrels.yml"})," file. Squirrels will automatically pass down the real-time selections (and authenticated user) to the datasets without having to refer to the parameters in the dashboard Python file."]}),"\n",(0,n.jsx)(a.p,{children:"If a parameter selection is specified through both the real-time selections and fixed parameters, the fixed parameters take precedence. Any parameter values used by the dataset that are not specified in either real-time selections or fixed parameters simply uses the default value of the parameter."}),"\n",(0,n.jsxs)(a.p,{children:["As an example, you can construct a dashboard that calls ",(0,n.jsx)(a.code,{children:"sqrl.dataset"}),' twice on the same dataset but with different fixed parameters. For instance, the "sqrl init" command creates a dashboard that looks like this:']}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-python",children:'from squirrels import DashboardArgs, dashboards as d\nfrom matplotlib import pyplot as plt, figure as f, axes as a\n\nasync def main(sqrl: DashboardArgs) -> d.PngDashboard:\n    spending_by_month_df = await sqrl.dataset("dataset_example", fixed_parameters={"group_by": "g4"})\n    spending_by_subcategory_df = await sqrl.dataset("dataset_example", fixed_parameters={"group_by": "g3"})\n\n    # Create a figure with two subplots\n    fig, (ax0, ax1) = plt.subplots(2, 1, figsize=(8, 8), height_ratios=(1, 2))\n    fig: f.Figure; ax0: a.Axes; ax1: a.Axes\n    fig.tight_layout(pad=4, h_pad=6)\n\n    # Create a bar chart of spending by month\n    spending_by_month_df.sort_values("month").plot(x="month", y="total_amount", ax=ax0)\n    ax0.set_title("Spending by Month")\n\n    # Create a pie chart of spending by subcategory\n    df_by_subcategory = spending_by_subcategory_df.set_index("subcategory").sort_values("total_amount", ascending=False)\n    autopct = lambda pct: (\'%.1f%%\' % pct) if pct > 6 else \'\'\n    df_by_subcategory.plot(y="total_amount", kind=\'pie\', ax=ax1, autopct=autopct, legend=False, ylabel="")\n    ax1.set_title("Spending by Subcategory")\n    \n    return d.PngDashboard(fig)\n'})}),"\n",(0,n.jsxs)(a.p,{children:["In this example, both ",(0,n.jsx)(a.code,{children:"spending_by_month_df"})," and ",(0,n.jsx)(a.code,{children:"spending_by_subcategory_df"})," are pandas DataFrames of the ",(0,n.jsx)(a.code,{children:"dataset_example"}),' dataset which changes results dynamically based on the parameter selections for "start_date", "end_date", and the "category" filter. However, ',(0,n.jsx)(a.code,{children:"spending_by_month_df"}),' is grouped by "Month" (the value of ID "g4") and ',(0,n.jsx)(a.code,{children:"spending_by_subcategory_df"}),' is grouped by "Subcategory" (the value of ID "g3").']})]})}function c(e={}){const{wrapper:a}={...(0,r.R)(),...e.components};return a?(0,n.jsx)(a,{...e,children:(0,n.jsx)(h,{...e})}):h(e)}},8453:(e,a,t)=>{t.d(a,{R:()=>o,x:()=>i});var s=t(6540);const n={},r=s.createContext(n);function o(e){const a=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(a):{...a,...e}}),[a,e])}function i(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:o(e.components),s.createElement(r.Provider,{value:a},e.children)}}}]);