"use strict";(self.webpackChunksquirrels_docs=self.webpackChunksquirrels_docs||[]).push([[5389],{1684:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>r,default:()=>h,frontMatter:()=>o,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"docs/concepts/connections","title":"Connections","description":"Database connections in Squirrels projects can be configured in two ways:","source":"@site/docs/docs/concepts/connections.md","sourceDirName":"docs/concepts","slug":"/docs/concepts/connections","permalink":"/docs/docs/concepts/connections","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"docs","previous":{"title":"Environment Variables","permalink":"/docs/docs/concepts/environment"},"next":{"title":"User Model","permalink":"/docs/docs/concepts/user"}}');var t=i(4848),c=i(8453);const o={},r="Connections",l={},d=[{value:"Connection Types",id:"connection-types",level:2},{value:"Configuration in squirrels.yml",id:"configuration-in-squirrelsyml",level:2},{value:"Connection Properties",id:"connection-properties",level:3},{value:"URI Format Examples",id:"uri-format-examples",level:3},{value:"SQLite",id:"sqlite",level:4},{value:"PostgreSQL",id:"postgresql",level:4},{value:"Configuration in connections.py",id:"configuration-in-connectionspy",level:2},{value:"Default Connection",id:"default-connection",level:2},{value:"Notes",id:"notes",level:2}];function a(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,c.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"connections",children:"Connections"})}),"\n",(0,t.jsx)(n.p,{children:"Database connections in Squirrels projects can be configured in two ways:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["Through the ",(0,t.jsx)(n.code,{children:"connections"})," section in ",(0,t.jsx)(n.code,{children:"squirrels.yml"})]}),"\n",(0,t.jsxs)(n.li,{children:["Through the ",(0,t.jsx)(n.code,{children:"connections.py"})," file in the ",(0,t.jsx)(n.code,{children:"pyconfigs"})," directory"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"connection-types",children:"Connection Types"}),"\n",(0,t.jsx)(n.p,{children:"Squirrels supports three types of database connections:"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Type"}),(0,t.jsx)(n.th,{children:"Description"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"sqlalchemy"})}),(0,t.jsxs)(n.td,{children:["Uses ",(0,t.jsx)(n.a,{href:"https://www.sqlalchemy.org/",children:"SQLAlchemy"})," for database operations"]})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"connectorx"})}),(0,t.jsxs)(n.td,{children:["Uses ",(0,t.jsx)(n.a,{href:"https://sfu-db.github.io/connector-x/intro.html",children:"ConnectorX"})," for high-performance data loading"]})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"adbc"})}),(0,t.jsxs)(n.td,{children:["Uses ",(0,t.jsx)(n.a,{href:"https://arrow.apache.org/adbc/current/index.html",children:"ADBC"})," (Arrow Database Connectivity)"]})]})]})]}),"\n",(0,t.jsx)(n.h2,{id:"configuration-in-squirrelsyml",children:"Configuration in squirrels.yml"}),"\n",(0,t.jsxs)(n.p,{children:["You can configure database connections in the ",(0,t.jsx)(n.code,{children:"connections"})," section of ",(0,t.jsx)(n.code,{children:"squirrels.yml"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"connections:\n  - name: default\n    label: SQLite Expenses Database\n    type: sqlalchemy\n    uri: sqlite:///{project_path}/path/to/database.db\n    sa_create_engine_args: {}  # optional\n"})}),"\n",(0,t.jsx)(n.p,{children:"You can use environment variables for the connection URIs, especially if it contains sensitive information or is different for different environments:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"connections:\n  - name: default\n    type: sqlalchemy\n    uri: {{ env_vars.DATABASE_URI }}\n"})}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"{project_path}"})," variable is automatically replaced with the path to the project root. It can be included in the environment variable value as well."]}),"\n",(0,t.jsx)(n.h3,{id:"connection-properties",children:"Connection Properties"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Property"}),(0,t.jsx)(n.th,{children:"Type"}),(0,t.jsx)(n.th,{children:"Required"}),(0,t.jsx)(n.th,{children:"Description"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"name"})}),(0,t.jsx)(n.td,{children:"string"}),(0,t.jsx)(n.td,{children:"Yes"}),(0,t.jsx)(n.td,{children:"Unique identifier for the connection"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"label"})}),(0,t.jsx)(n.td,{children:"string"}),(0,t.jsx)(n.td,{children:"No"}),(0,t.jsx)(n.td,{children:"Display name for the connection"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"type"})}),(0,t.jsx)(n.td,{children:"string"}),(0,t.jsx)(n.td,{children:"Yes"}),(0,t.jsxs)(n.td,{children:["One of: ",(0,t.jsx)(n.code,{children:"sqlalchemy"}),", ",(0,t.jsx)(n.code,{children:"connectorx"}),", or ",(0,t.jsx)(n.code,{children:"adbc"})]})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"uri"})}),(0,t.jsx)(n.td,{children:"string"}),(0,t.jsx)(n.td,{children:"Yes"}),(0,t.jsx)(n.td,{children:"Database connection URI"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"sa_create_engine_args"})}),(0,t.jsx)(n.td,{children:"object"}),(0,t.jsx)(n.td,{children:"No"}),(0,t.jsx)(n.td,{children:"Additional arguments for SQLAlchemy engine creation"})]})]})]}),"\n",(0,t.jsx)(n.h3,{id:"uri-format-examples",children:"URI Format Examples"}),"\n",(0,t.jsx)(n.h4,{id:"sqlite",children:"SQLite"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["SQLAlchemy: ",(0,t.jsx)(n.code,{children:"sqlite:///relative/path/to/database.db"})]}),"\n",(0,t.jsxs)(n.li,{children:["ConnectorX/ADBC: ",(0,t.jsx)(n.code,{children:"sqlite://relative/path/to/database.db"})]}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"postgresql",children:"PostgreSQL"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["All Types: ",(0,t.jsx)(n.code,{children:"postgresql://username:password@host:port/database"})]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Check out documentation for the specific connection type for supported databases and URI formats:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://docs.sqlalchemy.org/en/latest/core/engines.html#database-urls",children:"SQLAlchemy"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://sfu-db.github.io/connector-x/databases.html",children:"ConnectorX"})}),"\n",(0,t.jsxs)(n.li,{children:["ADBC uses the same URI format as ConnectorX but with different ",(0,t.jsx)(n.a,{href:"https://arrow.apache.org/adbc/current/driver/status.html",children:"supported databases"})]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"configuration-in-connectionspy",children:"Configuration in connections.py"}),"\n",(0,t.jsxs)(n.p,{children:["For more complex connection setups, you can use Python code in ",(0,t.jsx)(n.code,{children:"pyconfigs/connections.py"}),". The file should define a ",(0,t.jsx)(n.code,{children:"main"})," function that takes two parameters. The following is an example:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'from typing import Any\nfrom squirrels import ConnectionsArgs, ConnectionProperties, ConnectionType\n\ndef main(connections: dict[str, ConnectionProperties | Any], sqrl: ConnectionsArgs) -> None:\n    """\n    Define database connections by adding them to the "connections" dictionary.\n    \n    Args:\n        connections: Dictionary to add connections to\n        sqrl: Object containing project variables and environment variables\n    """\n    # Get connection string from environment variable\n    conn_str: str = sqrl.env_vars["SQLITE_URI"].format(project_path=sqrl.project_path)\n    \n    # Add connection using ConnectionProperties\n    connections["default"] = ConnectionProperties(\n        label="SQLite Expenses Database",\n        type=ConnectionType.SQLALCHEMY,\n        uri=conn_str\n    )\n'})}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"main"})," function receives:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"connections"}),": Dictionary to add connections to, usually as ConnectionProperties objects for database connections"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"sqrl"}),": Object containing:","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"project_path"}),": Path to the project root"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"env_vars"}),": Dictionary of environment variables"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"project_variables"}),": Dictionary of project variables from ",(0,t.jsx)(n.code,{children:"squirrels.yml"})]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["Since ",(0,t.jsx)(n.code,{children:"sqrl.env_vars"})," is a dictionary containing the raw value of environment variables, you must substitute the ",(0,t.jsx)(n.code,{children:"{project_path}"})," placeholder in the URI yourself if it comes from an environment variable."]}),"\n",(0,t.jsx)(n.admonition,{type:"tip",children:(0,t.jsxs)(n.p,{children:["You can also cache values other than ConnectionProperties into the ",(0,t.jsx)(n.code,{children:"connections"})," dictionary at server startup time. For example, you can read a machine learning model from a pickle file and cache it into the ",(0,t.jsx)(n.code,{children:"connections"})," dictionary as a scikit-learn model. Then, you can use the machine learning model in a Python data model to make inferences."]})}),"\n",(0,t.jsx)(n.h2,{id:"default-connection",children:"Default Connection"}),"\n",(0,t.jsxs)(n.p,{children:["The default connection is specified by the ",(0,t.jsx)(n.code,{children:"SQRL_CONNECTIONS__DEFAULT_NAME_USED"})," environment variable (defaults to ",(0,t.jsx)(n.code,{children:"default"}),"). This connection is used for:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Source models that don't specify a connection"}),"\n",(0,t.jsx)(n.li,{children:"Dbview models that don't specify a connection"}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"notes",children:"Notes"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Connection names must be unique"}),"\n",(0,t.jsx)(n.li,{children:"Specifying connections in both squirrels.yml and connections.py is allowed. If a connection name is specified in both places, the value in connections.py takes precedence"}),"\n",(0,t.jsxs)(n.li,{children:["The ",(0,t.jsx)(n.code,{children:"sqlalchemy"})," type supports SQL parameter placeholders in queries"]}),"\n",(0,t.jsxs)(n.li,{children:["The ",(0,t.jsx)(n.code,{children:"connectorx"})," and ",(0,t.jsx)(n.code,{children:"adbc"})," types do not support SQL parameter placeholders"]}),"\n",(0,t.jsx)(n.li,{children:"Connection URIs should not be committed to version control if they contain sensitive information"}),"\n",(0,t.jsx)(n.li,{children:"Use environment variables for sensitive connection details"}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,c.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(a,{...e})}):a(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>o,x:()=>r});var s=i(6540);const t={},c=s.createContext(t);function o(e){const n=s.useContext(c);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),s.createElement(c.Provider,{value:n},e.children)}}}]);